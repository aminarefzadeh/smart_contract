1627131413
*** UNIVERSALMUTATOR ***
MUTATING WITH RULES: universal.rules, solidity.rules, c_like.rules
78 MUTANTS GENERATED BY RULES
PROCESSING MUTANT: 1: contract SimpleContract {  ==>  contract SimpleContract {
break;...INVALID 
PROCESSING MUTANT: 1: contract SimpleContract {  ==>  selfdestruct(msg.sender);...INVALID 
PROCESSING MUTANT: 1: contract SimpleContract {  ==>  revert();...INVALID 
PROCESSING MUTANT: 1: contract SimpleContract {  ==>  contract  {...INVALID 
PROCESSING MUTANT: 1: contract SimpleContract {  ==>  contract SimpleContract ...INVALID 
PROCESSING MUTANT: 1: contract SimpleContract {  ==>  /*contract SimpleContract {*/...INVALID 
PROCESSING MUTANT: 2:     uint private sellerBalance=10;  ==>      uint private sellerBalance=0;...VALID [written to ./input/mutants/contract.mutant.0.sol] 
PROCESSING MUTANT: 2:     uint private sellerBalance=10;  ==>      uint private sellerBalance=1;...VALID [written to ./input/mutants/contract.mutant.1.sol] 
PROCESSING MUTANT: 2:     uint private sellerBalance=10;  ==>      uint private sellerBalance=-1;...INVALID 
PROCESSING MUTANT: 2:     uint private sellerBalance=10;  ==>      uint private sellerBalance=(10+1);...VALID [written to ./input/mutants/contract.mutant.2.sol] 
PROCESSING MUTANT: 2:     uint private sellerBalance=10;  ==>      uint private sellerBalance=(10-1);...VALID [written to ./input/mutants/contract.mutant.3.sol] 
PROCESSING MUTANT: 2:     uint private sellerBalance=10;  ==>      uint private sellerBalance=10;
    break;...INVALID 
PROCESSING MUTANT: 2:     uint private sellerBalance=10;  ==>      int private sellerBalance=10;...INVALID 
PROCESSING MUTANT: 2:     uint private sellerBalance=10;  ==>      uint  sellerBalance=10;...REDUNDANT 
PROCESSING MUTANT: 2:     uint private sellerBalance=10;  ==>  selfdestruct(msg.sender);...INVALID 
PROCESSING MUTANT: 2:     uint private sellerBalance=10;  ==>  revert();...INVALID 
PROCESSING MUTANT: 2:     uint private sellerBalance=10;  ==>      uint private ...INVALID 
PROCESSING MUTANT: 2:     uint private sellerBalance=10;  ==>      /*uint private sellerBalance=10;*/...INVALID 
PROCESSING MUTANT: 4:     constructor(uint value, uint value2) public  ==>      constructor(uint value, uint value0) public...INVALID 
PROCESSING MUTANT: 4:     constructor(uint value, uint value2) public  ==>      constructor(uint value, uint value1) public...INVALID 
PROCESSING MUTANT: 4:     constructor(uint value, uint value2) public  ==>      constructor(uint value, uint value-1) public...INVALID 
PROCESSING MUTANT: 4:     constructor(uint value, uint value2) public  ==>      constructor(uint value, uint value(2+1)) public...INVALID 
PROCESSING MUTANT: 4:     constructor(uint value, uint value2) public  ==>      constructor(uint value, uint value(2-1)) public...INVALID 
PROCESSING MUTANT: 4:     constructor(uint value, uint value2) public  ==>      constructor(uint value, uint value2) public
    break;...INVALID 
PROCESSING MUTANT: 4:     constructor(uint value, uint value2) public  ==>      constructor( uint value2,uint value) public...VALID [written to ./input/mutants/contract.mutant.4.sol] 
PROCESSING MUTANT: 4:     constructor(uint value, uint value2) public  ==>      constructor(int value, uint value2) public...INVALID 
PROCESSING MUTANT: 4:     constructor(uint value, uint value2) public  ==>      constructor(uint value, int value2) public...INVALID 
PROCESSING MUTANT: 4:     constructor(uint value, uint value2) public  ==>  selfdestruct(msg.sender);...INVALID 
PROCESSING MUTANT: 4:     constructor(uint value, uint value2) public  ==>  revert();...INVALID 
PROCESSING MUTANT: 4:     constructor(uint value, uint value2) public  ==>      constructor(uint  uint value2) public...INVALID 
PROCESSING MUTANT: 4:     constructor(uint value, uint value2) public  ==>      constructor(uint value,  value2) public...INVALID 
PROCESSING MUTANT: 4:     constructor(uint value, uint value2) public  ==>      constructor(uint value, uint  public...INVALID 
PROCESSING MUTANT: 4:     constructor(uint value, uint value2) public  ==>      constructor(uint value, uint value2) ...REDUNDANT 
PROCESSING MUTANT: 4:     constructor(uint value, uint value2) public  ==>      /*constructor(uint value, uint value2) public*/...INVALID 
PROCESSING MUTANT: 5:     {  ==>      {
    break;...INVALID 
PROCESSING MUTANT: 6:         assert(value == value2);  ==>          assert(value != value2);...VALID [written to ./input/mutants/contract.mutant.5.sol] 
PROCESSING MUTANT: 6:         assert(value == value2);  ==>          assert(value <= value2);...VALID [written to ./input/mutants/contract.mutant.6.sol] 
PROCESSING MUTANT: 6:         assert(value == value2);  ==>          assert(value >= value2);...VALID [written to ./input/mutants/contract.mutant.7.sol] 
PROCESSING MUTANT: 6:         assert(value == value2);  ==>          assert(value > value2);...VALID [written to ./input/mutants/contract.mutant.8.sol] 
PROCESSING MUTANT: 6:         assert(value == value2);  ==>          assert(value < value2);...VALID [written to ./input/mutants/contract.mutant.9.sol] 
PROCESSING MUTANT: 6:         assert(value == value2);  ==>          assert(value == value0);...INVALID 
PROCESSING MUTANT: 6:         assert(value == value2);  ==>          assert(value == value1);...INVALID 
PROCESSING MUTANT: 6:         assert(value == value2);  ==>          assert(value == value-1);...VALID [written to ./input/mutants/contract.mutant.10.sol] 
PROCESSING MUTANT: 6:         assert(value == value2);  ==>          assert(value == value(2+1));...INVALID 
PROCESSING MUTANT: 6:         assert(value == value2);  ==>          assert(value == value(2-1));...INVALID 
PROCESSING MUTANT: 6:         assert(value == value2);  ==>          assert(value == value2);
        break;...INVALID 
PROCESSING MUTANT: 6:         assert(value == value2);  ==>  selfdestruct(msg.sender);...INVALID 
PROCESSING MUTANT: 6:         assert(value == value2);  ==>  revert();...VALID [written to ./input/mutants/contract.mutant.11.sol] 
PROCESSING MUTANT: 6:         assert(value == value2);  ==>          assert(value  value2);...INVALID 
PROCESSING MUTANT: 6:         assert(value == value2);  ==>          assert(value == ...INVALID 
PROCESSING MUTANT: 6:         assert(value == value2);  ==>          /*assert(value == value2);*/...VALID [written to ./input/mutants/contract.mutant.12.sol] 
PROCESSING MUTANT: 7:         sellerBalance = value;  ==>          sellerBalance = value;
        break;...INVALID 
PROCESSING MUTANT: 7:         sellerBalance = value;  ==>  selfdestruct(msg.sender);...INVALID 
PROCESSING MUTANT: 7:         sellerBalance = value;  ==>  revert();...VALID [written to ./input/mutants/contract.mutant.13.sol] 
PROCESSING MUTANT: 7:         sellerBalance = value;  ==>          sellerBalance  value;...INVALID 
PROCESSING MUTANT: 7:         sellerBalance = value;  ==>          sellerBalance = ...INVALID 
PROCESSING MUTANT: 7:         sellerBalance = value;  ==>          /*sellerBalance = value;*/...VALID [written to ./input/mutants/contract.mutant.14.sol] 
PROCESSING MUTANT: 8:     }  ==>      }
    break;...INVALID 
PROCESSING MUTANT: 10:     function check(uint value) public{  ==>      function check(uint value) public{
    break;...INVALID 
PROCESSING MUTANT: 10:     function check(uint value) public{  ==>      function check(int value) public{...INVALID 
PROCESSING MUTANT: 10:     function check(uint value) public{  ==>  selfdestruct(msg.sender);...INVALID 
PROCESSING MUTANT: 10:     function check(uint value) public{  ==>  revert();...INVALID 
PROCESSING MUTANT: 10:     function check(uint value) public{  ==>      function  value) public{...INVALID 
PROCESSING MUTANT: 10:     function check(uint value) public{  ==>      function check(uint  public{...INVALID 
PROCESSING MUTANT: 10:     function check(uint value) public{  ==>      function check(uint value) ...INVALID 
PROCESSING MUTANT: 10:     function check(uint value) public{  ==>      /*function check(uint value) public{*/...INVALID 
PROCESSING MUTANT: 11:         assert(sellerBalance == value);  ==>          assert(sellerBalance != value);...VALID [written to ./input/mutants/contract.mutant.15.sol] 
PROCESSING MUTANT: 11:         assert(sellerBalance == value);  ==>          assert(sellerBalance <= value);...VALID [written to ./input/mutants/contract.mutant.16.sol] 
PROCESSING MUTANT: 11:         assert(sellerBalance == value);  ==>          assert(sellerBalance >= value);...VALID [written to ./input/mutants/contract.mutant.17.sol] 
PROCESSING MUTANT: 11:         assert(sellerBalance == value);  ==>          assert(sellerBalance > value);...VALID [written to ./input/mutants/contract.mutant.18.sol] 
PROCESSING MUTANT: 11:         assert(sellerBalance == value);  ==>          assert(sellerBalance < value);...VALID [written to ./input/mutants/contract.mutant.19.sol] 
PROCESSING MUTANT: 11:         assert(sellerBalance == value);  ==>          assert(sellerBalance == value);
        break;...INVALID 
PROCESSING MUTANT: 11:         assert(sellerBalance == value);  ==>  selfdestruct(msg.sender);...INVALID 
PROCESSING MUTANT: 11:         assert(sellerBalance == value);  ==>  revert();...VALID [written to ./input/mutants/contract.mutant.20.sol] 
PROCESSING MUTANT: 11:         assert(sellerBalance == value);  ==>          assert(sellerBalance  value);...INVALID 
PROCESSING MUTANT: 11:         assert(sellerBalance == value);  ==>          assert(sellerBalance == ...INVALID 
PROCESSING MUTANT: 11:         assert(sellerBalance == value);  ==>          /*assert(sellerBalance == value);*/...VALID [written to ./input/mutants/contract.mutant.21.sol] 
PROCESSING MUTANT: 12:     }  ==>      }
    break;...INVALID 
22 VALID MUTANTS
54 INVALID MUTANTS
2 REDUNDANT MUTANTS
1627131413
Finding test cases ...
Start processing 5 test cases ...
Start processing test case 1
Concretizing symbolic values ...
Run test case on contract.mutant.20.sol
Killed: contract.mutant.20.sol
Run test case on contract.mutant.2.sol
Run test case on contract.mutant.5.sol
Killed: contract.mutant.5.sol
Run test case on contract.mutant.13.sol
Killed: contract.mutant.13.sol
Run test case on contract.mutant.7.sol
Run test case on contract.mutant.9.sol
Killed: contract.mutant.9.sol
Run test case on contract.mutant.11.sol
Killed: contract.mutant.11.sol
Run test case on contract.mutant.4.sol
Run test case on contract.mutant.18.sol
Killed: contract.mutant.18.sol
Run test case on contract.mutant.15.sol
Killed: contract.mutant.15.sol
Run test case on contract.mutant.19.sol
Killed: contract.mutant.19.sol
Run test case on contract.mutant.14.sol
Killed: contract.mutant.14.sol
Run test case on contract.mutant.10.sol
Killed: contract.mutant.10.sol
Run test case on contract.mutant.0.sol
Run test case on contract.mutant.1.sol
Run test case on contract.mutant.6.sol
Run test case on contract.mutant.3.sol
Run test case on contract.mutant.8.sol
Killed: contract.mutant.8.sol
Run test case on contract.mutant.21.sol
Run test case on contract.mutant.17.sol
Run test case on contract.mutant.16.sol
Run test case on contract.mutant.12.sol
Start processing test case 2
Concretizing symbolic values ...
Run test case on contract.mutant.2.sol
Run test case on contract.mutant.7.sol
Run test case on contract.mutant.0.sol
Run test case on contract.mutant.1.sol
Run test case on contract.mutant.6.sol
Run test case on contract.mutant.3.sol
Run test case on contract.mutant.4.sol
Run test case on contract.mutant.21.sol
Run test case on contract.mutant.17.sol
Run test case on contract.mutant.16.sol
Run test case on contract.mutant.12.sol
Start processing test case 3
Concretizing symbolic values ...
Run test case on contract.mutant.2.sol
Run test case on contract.mutant.7.sol
Killed: contract.mutant.7.sol
Run test case on contract.mutant.0.sol
Run test case on contract.mutant.1.sol
Run test case on contract.mutant.6.sol
Run test case on contract.mutant.3.sol
Run test case on contract.mutant.4.sol
Run test case on contract.mutant.21.sol
Run test case on contract.mutant.17.sol
Run test case on contract.mutant.16.sol
Run test case on contract.mutant.12.sol
Killed: contract.mutant.12.sol
Start processing test case 4
Concretizing symbolic values ...
Run test case on contract.mutant.2.sol
Run test case on contract.mutant.0.sol
Run test case on contract.mutant.1.sol
Run test case on contract.mutant.6.sol
Run test case on contract.mutant.3.sol
Run test case on contract.mutant.4.sol
Run test case on contract.mutant.21.sol
Killed: contract.mutant.21.sol
Run test case on contract.mutant.17.sol
Killed: contract.mutant.17.sol
Run test case on contract.mutant.16.sol
Start processing test case 5
Concretizing symbolic values ...
Run test case on contract.mutant.2.sol
Run test case on contract.mutant.0.sol
Run test case on contract.mutant.1.sol
Run test case on contract.mutant.6.sol
Run test case on contract.mutant.3.sol
Run test case on contract.mutant.4.sol
Run test case on contract.mutant.16.sol
Write result in result.txt

Number of mutants: 22
Number of killed mutants: 15
2021-07-24 17:29:38,836: [272397] m.c.plugin:WARNING: Caught will_solve in state None, but failed to capture its initialization
manticore run time: 46.12523174285889
project run time: 118.62956547737122
1627131590
