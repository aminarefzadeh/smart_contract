1627325330
*** UNIVERSALMUTATOR ***
MUTATING WITH RULES: universal.rules, solidity.rules, c_like.rules
78 MUTANTS GENERATED BY RULES
PROCESSING MUTANT: 1: contract SimpleContract {  ==>  contract SimpleContract {
break;...INVALID
PROCESSING MUTANT: 1: contract SimpleContract {  ==>  selfdestruct(msg.sender);...INVALID
PROCESSING MUTANT: 1: contract SimpleContract {  ==>  revert();...INVALID
PROCESSING MUTANT: 1: contract SimpleContract {  ==>  contract  {...INVALID
PROCESSING MUTANT: 1: contract SimpleContract {  ==>  contract SimpleContract ...INVALID
PROCESSING MUTANT: 1: contract SimpleContract {  ==>  /*contract SimpleContract {*/...INVALID
PROCESSING MUTANT: 2:     uint private sellerBalance=10;  ==>      uint private sellerBalance=0;...VALID [written to ./input/mutants/contract.mutant.0.sol]
PROCESSING MUTANT: 2:     uint private sellerBalance=10;  ==>      uint private sellerBalance=1;...VALID [written to ./input/mutants/contract.mutant.1.sol]
PROCESSING MUTANT: 2:     uint private sellerBalance=10;  ==>      uint private sellerBalance=-1;...INVALID
PROCESSING MUTANT: 2:     uint private sellerBalance=10;  ==>      uint private sellerBalance=(10+1);...VALID [written to ./input/mutants/contract.mutant.2.sol]
PROCESSING MUTANT: 2:     uint private sellerBalance=10;  ==>      uint private sellerBalance=(10-1);...VALID [written to ./input/mutants/contract.mutant.3.sol]
PROCESSING MUTANT: 2:     uint private sellerBalance=10;  ==>      uint private sellerBalance=10;
    break;...INVALID
PROCESSING MUTANT: 2:     uint private sellerBalance=10;  ==>      int private sellerBalance=10;...INVALID
PROCESSING MUTANT: 2:     uint private sellerBalance=10;  ==>      uint  sellerBalance=10;...REDUNDANT
PROCESSING MUTANT: 2:     uint private sellerBalance=10;  ==>  selfdestruct(msg.sender);...INVALID
PROCESSING MUTANT: 2:     uint private sellerBalance=10;  ==>  revert();...INVALID
PROCESSING MUTANT: 2:     uint private sellerBalance=10;  ==>      uint private ...INVALID
PROCESSING MUTANT: 2:     uint private sellerBalance=10;  ==>      /*uint private sellerBalance=10;*/...INVALID
PROCESSING MUTANT: 4:     constructor(uint value, uint value2) public  ==>      constructor(uint value, uint value0) public...INVALID
PROCESSING MUTANT: 4:     constructor(uint value, uint value2) public  ==>      constructor(uint value, uint value1) public...INVALID
PROCESSING MUTANT: 4:     constructor(uint value, uint value2) public  ==>      constructor(uint value, uint value-1) public...INVALID
PROCESSING MUTANT: 4:     constructor(uint value, uint value2) public  ==>      constructor(uint value, uint value(2+1)) public...INVALID
PROCESSING MUTANT: 4:     constructor(uint value, uint value2) public  ==>      constructor(uint value, uint value(2-1)) public...INVALID
PROCESSING MUTANT: 4:     constructor(uint value, uint value2) public  ==>      constructor(uint value, uint value2) public
    break;...INVALID
PROCESSING MUTANT: 4:     constructor(uint value, uint value2) public  ==>      constructor( uint value2,uint value) public...VALID [written to ./input/mutants/contract.mutant.4.sol]
PROCESSING MUTANT: 4:     constructor(uint value, uint value2) public  ==>      constructor(int value, uint value2) public...INVALID
PROCESSING MUTANT: 4:     constructor(uint value, uint value2) public  ==>      constructor(uint value, int value2) public...INVALID
PROCESSING MUTANT: 4:     constructor(uint value, uint value2) public  ==>  selfdestruct(msg.sender);...INVALID
PROCESSING MUTANT: 4:     constructor(uint value, uint value2) public  ==>  revert();...INVALID
PROCESSING MUTANT: 4:     constructor(uint value, uint value2) public  ==>      constructor(uint  uint value2) public...INVALID
PROCESSING MUTANT: 4:     constructor(uint value, uint value2) public  ==>      constructor(uint value,  value2) public...INVALID
PROCESSING MUTANT: 4:     constructor(uint value, uint value2) public  ==>      constructor(uint value, uint  public...INVALID
PROCESSING MUTANT: 4:     constructor(uint value, uint value2) public  ==>      constructor(uint value, uint value2) ...REDUNDANT
PROCESSING MUTANT: 4:     constructor(uint value, uint value2) public  ==>      /*constructor(uint value, uint value2) public*/...INVALID
PROCESSING MUTANT: 5:     {  ==>      {
    break;...INVALID
PROCESSING MUTANT: 6:         assert(value == value2);  ==>          assert(value != value2);...VALID [written to ./input/mutants/contract.mutant.5.sol]
PROCESSING MUTANT: 6:         assert(value == value2);  ==>          assert(value <= value2);...VALID [written to ./input/mutants/contract.mutant.6.sol]
PROCESSING MUTANT: 6:         assert(value == value2);  ==>          assert(value >= value2);...VALID [written to ./input/mutants/contract.mutant.7.sol]
PROCESSING MUTANT: 6:         assert(value == value2);  ==>          assert(value > value2);...VALID [written to ./input/mutants/contract.mutant.8.sol]
PROCESSING MUTANT: 6:         assert(value == value2);  ==>          assert(value < value2);...VALID [written to ./input/mutants/contract.mutant.9.sol]
PROCESSING MUTANT: 6:         assert(value == value2);  ==>          assert(value == value0);...INVALID
PROCESSING MUTANT: 6:         assert(value == value2);  ==>          assert(value == value1);...INVALID
PROCESSING MUTANT: 6:         assert(value == value2);  ==>          assert(value == value-1);...VALID [written to ./input/mutants/contract.mutant.10.sol]
PROCESSING MUTANT: 6:         assert(value == value2);  ==>          assert(value == value(2+1));...INVALID
PROCESSING MUTANT: 6:         assert(value == value2);  ==>          assert(value == value(2-1));...INVALID
PROCESSING MUTANT: 6:         assert(value == value2);  ==>          assert(value == value2);
        break;...INVALID
PROCESSING MUTANT: 6:         assert(value == value2);  ==>  selfdestruct(msg.sender);...VALID [written to ./input/mutants/contract.mutant.11.sol]
PROCESSING MUTANT: 6:         assert(value == value2);  ==>  revert();...VALID [written to ./input/mutants/contract.mutant.12.sol]
PROCESSING MUTANT: 6:         assert(value == value2);  ==>          assert(value  value2);...INVALID
PROCESSING MUTANT: 6:         assert(value == value2);  ==>          assert(value == ...INVALID
PROCESSING MUTANT: 6:         assert(value == value2);  ==>          /*assert(value == value2);*/...VALID [written to ./input/mutants/contract.mutant.13.sol]
PROCESSING MUTANT: 7:         sellerBalance = value;  ==>          sellerBalance = value;
        break;...INVALID
PROCESSING MUTANT: 7:         sellerBalance = value;  ==>  selfdestruct(msg.sender);...VALID [written to ./input/mutants/contract.mutant.14.sol]
PROCESSING MUTANT: 7:         sellerBalance = value;  ==>  revert();...VALID [written to ./input/mutants/contract.mutant.15.sol]
PROCESSING MUTANT: 7:         sellerBalance = value;  ==>          sellerBalance  value;...INVALID
PROCESSING MUTANT: 7:         sellerBalance = value;  ==>          sellerBalance = ...INVALID
PROCESSING MUTANT: 7:         sellerBalance = value;  ==>          /*sellerBalance = value;*/...VALID [written to ./input/mutants/contract.mutant.16.sol]
PROCESSING MUTANT: 8:     }  ==>      }
    break;...INVALID
PROCESSING MUTANT: 10:     function check(uint value) public{  ==>      function check(uint value) public{
    break;...INVALID
PROCESSING MUTANT: 10:     function check(uint value) public{  ==>      function check(int value) public{...INVALID
PROCESSING MUTANT: 10:     function check(uint value) public{  ==>  selfdestruct(msg.sender);...INVALID
PROCESSING MUTANT: 10:     function check(uint value) public{  ==>  revert();...INVALID
PROCESSING MUTANT: 10:     function check(uint value) public{  ==>      function  value) public{...INVALID
PROCESSING MUTANT: 10:     function check(uint value) public{  ==>      function check(uint  public{...INVALID
PROCESSING MUTANT: 10:     function check(uint value) public{  ==>      function check(uint value) ...INVALID
PROCESSING MUTANT: 10:     function check(uint value) public{  ==>      /*function check(uint value) public{*/...INVALID
PROCESSING MUTANT: 11:         assert(sellerBalance == value);  ==>          assert(sellerBalance != value);...VALID [written to ./input/mutants/contract.mutant.17.sol]
PROCESSING MUTANT: 11:         assert(sellerBalance == value);  ==>          assert(sellerBalance <= value);...VALID [written to ./input/mutants/contract.mutant.18.sol]
PROCESSING MUTANT: 11:         assert(sellerBalance == value);  ==>          assert(sellerBalance >= value);...VALID [written to ./input/mutants/contract.mutant.19.sol]
PROCESSING MUTANT: 11:         assert(sellerBalance == value);  ==>          assert(sellerBalance > value);...VALID [written to ./input/mutants/contract.mutant.20.sol]
PROCESSING MUTANT: 11:         assert(sellerBalance == value);  ==>          assert(sellerBalance < value);...VALID [written to ./input/mutants/contract.mutant.21.sol]
PROCESSING MUTANT: 11:         assert(sellerBalance == value);  ==>          assert(sellerBalance == value);
        break;...INVALID
PROCESSING MUTANT: 11:         assert(sellerBalance == value);  ==>  selfdestruct(msg.sender);...VALID [written to ./input/mutants/contract.mutant.22.sol]
PROCESSING MUTANT: 11:         assert(sellerBalance == value);  ==>  revert();...VALID [written to ./input/mutants/contract.mutant.23.sol]
PROCESSING MUTANT: 11:         assert(sellerBalance == value);  ==>          assert(sellerBalance  value);...INVALID
PROCESSING MUTANT: 11:         assert(sellerBalance == value);  ==>          assert(sellerBalance == ...INVALID
PROCESSING MUTANT: 11:         assert(sellerBalance == value);  ==>          /*assert(sellerBalance == value);*/...VALID [written to ./input/mutants/contract.mutant.24.sol]
PROCESSING MUTANT: 12:     }  ==>      }
    break;...INVALID
25 VALID MUTANTS
51 INVALID MUTANTS
2 REDUNDANT MUTANTS
1627325330
Finding test cases ...
Start processing 5 test cases ...
Start processing test case 1
Concretizing symbolic values ...
Run test case on contract.mutant.2.sol
Run test case on contract.mutant.7.sol
Run test case on contract.mutant.0.sol
Run test case on contract.mutant.19.sol
Run test case on contract.mutant.3.sol
Run test case on contract.mutant.23.sol
Killed: contract.mutant.23.sol
Run test case on contract.mutant.13.sol
Run test case on contract.mutant.5.sol
Killed: contract.mutant.5.sol
Run test case on contract.mutant.17.sol
Killed: contract.mutant.17.sol
Run test case on contract.mutant.12.sol
Killed: contract.mutant.12.sol
Run test case on contract.mutant.21.sol
Killed: contract.mutant.21.sol
Run test case on contract.mutant.14.sol
2021-07-26 23:19:12,156: [9649] m.c.worker:ERROR: Exception in state 9: NotImplementedError('__bool__ for Bool')
Traceback (most recent call last):
  File "/home/amin/.virtualenvs/proje/lib/python3.8/site-packages/manticore/core/worker.py", line 121, in run
    current_state.execute()
  File "/home/amin/.virtualenvs/proje/lib/python3.8/site-packages/manticore/ethereum/state.py", line 8, in execute
    return self._platform.execute()
  File "/home/amin/.virtualenvs/proje/lib/python3.8/site-packages/manticore/platforms/evm.py", line 3093, in execute
    self.current_vm.execute()
  File "/home/amin/.virtualenvs/proje/lib/python3.8/site-packages/manticore/platforms/evm.py", line 1312, in execute
    last_pc, last_gas, instruction, arguments, fee, allocated = self._checkpoint()
  File "/home/amin/.virtualenvs/proje/lib/python3.8/site-packages/manticore/platforms/evm.py", line 1199, in _checkpoint
    fee = self._calculate_gas(*arguments)
  File "/home/amin/.virtualenvs/proje/lib/python3.8/site-packages/manticore/platforms/evm.py", line 1172, in _calculate_gas
    return current.fee + implementation(*arguments)
  File "/home/amin/.virtualenvs/proje/lib/python3.8/site-packages/manticore/platforms/evm.py", line 2296, in SELFDESTRUCT_gas
    if not self.world.account_exists(recipient) and self.world.get_balance(self.address) != 0:
  File "/home/amin/.virtualenvs/proje/lib/python3.8/site-packages/manticore/core/smtlib/expression.py", line 168, in __bool__
    raise NotImplementedError("__bool__ for Bool")
NotImplementedError: __bool__ for Bool

Killed: contract.mutant.14.sol
Run test case on contract.mutant.9.sol
Killed: contract.mutant.9.sol
Run test case on contract.mutant.22.sol
Killed: contract.mutant.22.sol
Run test case on contract.mutant.6.sol
Run test case on contract.mutant.11.sol
2021-07-26 23:19:15,698: [9649] m.c.worker:ERROR: Exception in state 4: NotImplementedError('__bool__ for Bool')
Traceback (most recent call last):
  File "/home/amin/.virtualenvs/proje/lib/python3.8/site-packages/manticore/core/worker.py", line 121, in run
    current_state.execute()
  File "/home/amin/.virtualenvs/proje/lib/python3.8/site-packages/manticore/ethereum/state.py", line 8, in execute
    return self._platform.execute()
  File "/home/amin/.virtualenvs/proje/lib/python3.8/site-packages/manticore/platforms/evm.py", line 3093, in execute
    self.current_vm.execute()
  File "/home/amin/.virtualenvs/proje/lib/python3.8/site-packages/manticore/platforms/evm.py", line 1312, in execute
    last_pc, last_gas, instruction, arguments, fee, allocated = self._checkpoint()
  File "/home/amin/.virtualenvs/proje/lib/python3.8/site-packages/manticore/platforms/evm.py", line 1199, in _checkpoint
    fee = self._calculate_gas(*arguments)
  File "/home/amin/.virtualenvs/proje/lib/python3.8/site-packages/manticore/platforms/evm.py", line 1172, in _calculate_gas
    return current.fee + implementation(*arguments)
  File "/home/amin/.virtualenvs/proje/lib/python3.8/site-packages/manticore/platforms/evm.py", line 2296, in SELFDESTRUCT_gas
    if not self.world.account_exists(recipient) and self.world.get_balance(self.address) != 0:
  File "/home/amin/.virtualenvs/proje/lib/python3.8/site-packages/manticore/core/smtlib/expression.py", line 168, in __bool__
    raise NotImplementedError("__bool__ for Bool")
NotImplementedError: __bool__ for Bool

Killed: contract.mutant.11.sol
Run test case on contract.mutant.18.sol
Run test case on contract.mutant.16.sol
Killed: contract.mutant.16.sol
Run test case on contract.mutant.24.sol
Run test case on contract.mutant.1.sol
Run test case on contract.mutant.4.sol
Run test case on contract.mutant.20.sol
Killed: contract.mutant.20.sol
Run test case on contract.mutant.10.sol
Killed: contract.mutant.10.sol
Run test case on contract.mutant.15.sol
Killed: contract.mutant.15.sol
Run test case on contract.mutant.8.sol
Killed: contract.mutant.8.sol
Start processing test case 2
Concretizing symbolic values ...
Run test case on contract.mutant.2.sol
Run test case on contract.mutant.7.sol
Run test case on contract.mutant.0.sol
Run test case on contract.mutant.6.sol
Run test case on contract.mutant.19.sol
Run test case on contract.mutant.3.sol
Run test case on contract.mutant.13.sol
Run test case on contract.mutant.18.sol
Run test case on contract.mutant.24.sol
Run test case on contract.mutant.1.sol
Run test case on contract.mutant.4.sol
Start processing test case 3
Concretizing symbolic values ...
Run test case on contract.mutant.2.sol
Run test case on contract.mutant.7.sol
Killed: contract.mutant.7.sol
Run test case on contract.mutant.0.sol
Run test case on contract.mutant.6.sol
Run test case on contract.mutant.19.sol
Run test case on contract.mutant.3.sol
Run test case on contract.mutant.13.sol
Killed: contract.mutant.13.sol
Run test case on contract.mutant.18.sol
Run test case on contract.mutant.24.sol
Run test case on contract.mutant.1.sol
Run test case on contract.mutant.4.sol
Start processing test case 4
Concretizing symbolic values ...
Run test case on contract.mutant.2.sol
Run test case on contract.mutant.0.sol
Run test case on contract.mutant.6.sol
Run test case on contract.mutant.19.sol
Killed: contract.mutant.19.sol
Run test case on contract.mutant.3.sol
Run test case on contract.mutant.18.sol
Run test case on contract.mutant.24.sol
Killed: contract.mutant.24.sol
Run test case on contract.mutant.1.sol
Run test case on contract.mutant.4.sol
Start processing test case 5
Concretizing symbolic values ...
Run test case on contract.mutant.2.sol
Run test case on contract.mutant.0.sol
Run test case on contract.mutant.6.sol
Run test case on contract.mutant.3.sol
Run test case on contract.mutant.18.sol
Killed: contract.mutant.18.sol
Run test case on contract.mutant.1.sol
Run test case on contract.mutant.4.sol
Write result in result.txt

Number of mutants: 25
Number of killed mutants: 19
2021-07-26 23:20:01,680: [11087] m.c.plugin:WARNING: Caught will_solve in state None, but failed to capture its initialization
manticore run time: 16.598284244537354
project run time: 54.168840646743774
1627325405