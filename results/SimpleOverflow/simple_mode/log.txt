1627308275
*** UNIVERSALMUTATOR ***
MUTATING WITH RULES: universal.rules, solidity.rules, c_like.rules
SKIPPED 1 MUTANTS ONLY CHANGING STRING LITERALS
59 MUTANTS GENERATED BY RULES
PROCESSING MUTANT: 1: contract Overflow {  ==>  contract Overflow {
break;...INVALID
PROCESSING MUTANT: 1: contract Overflow {  ==>  selfdestruct(msg.sender);...INVALID
PROCESSING MUTANT: 1: contract Overflow {  ==>  revert();...INVALID
PROCESSING MUTANT: 1: contract Overflow {  ==>  contract  {...INVALID
PROCESSING MUTANT: 1: contract Overflow {  ==>  contract Overflow ...INVALID
PROCESSING MUTANT: 1: contract Overflow {  ==>  /*contract Overflow {*/...INVALID
PROCESSING MUTANT: 2:     uint private sellerBalance=0;  ==>      uint private sellerBalance=1;...VALID [written to ./input/mutants/contract.mutant.0.sol]
PROCESSING MUTANT: 2:     uint private sellerBalance=0;  ==>      uint private sellerBalance=-1;...INVALID
PROCESSING MUTANT: 2:     uint private sellerBalance=0;  ==>      uint private sellerBalance=(0+1);...REDUNDANT
PROCESSING MUTANT: 2:     uint private sellerBalance=0;  ==>      uint private sellerBalance=(0-1);...INVALID
PROCESSING MUTANT: 2:     uint private sellerBalance=0;  ==>      uint private sellerBalance=0;
    break;...INVALID
PROCESSING MUTANT: 2:     uint private sellerBalance=0;  ==>      int private sellerBalance=0;...INVALID
PROCESSING MUTANT: 2:     uint private sellerBalance=0;  ==>      uint  sellerBalance=0;...REDUNDANT
PROCESSING MUTANT: 2:     uint private sellerBalance=0;  ==>  selfdestruct(msg.sender);...INVALID
PROCESSING MUTANT: 2:     uint private sellerBalance=0;  ==>  revert();...INVALID
PROCESSING MUTANT: 2:     uint private sellerBalance=0;  ==>      uint private ...INVALID
PROCESSING MUTANT: 2:     uint private sellerBalance=0;  ==>      /*uint private sellerBalance=0;*/...INVALID
PROCESSING MUTANT: 4:     function add(uint value) public{  ==>      function add(uint value) public{
    break;...INVALID
PROCESSING MUTANT: 4:     function add(uint value) public{  ==>      function add(int value) public{...INVALID
PROCESSING MUTANT: 4:     function add(uint value) public{  ==>  selfdestruct(msg.sender);...INVALID
PROCESSING MUTANT: 4:     function add(uint value) public{  ==>  revert();...INVALID
PROCESSING MUTANT: 4:     function add(uint value) public{  ==>      function  value) public{...INVALID
PROCESSING MUTANT: 4:     function add(uint value) public{  ==>      function add(uint  public{...INVALID
PROCESSING MUTANT: 4:     function add(uint value) public{  ==>      function add(uint value) ...INVALID
PROCESSING MUTANT: 4:     function add(uint value) public{  ==>      /*function add(uint value) public{*/...INVALID
PROCESSING MUTANT: 5:         sellerBalance += value; // complicated math with possible overflow  ==>          sellerBalance -= value; // complicated math with possible overflow...VALID [written to ./input/mutants/contract.mutant.1.sol]
PROCESSING MUTANT: 5:         sellerBalance += value; // complicated math with possible overflow  ==>          sellerBalance *= value; // complicated math with possible overflow...VALID [written to ./input/mutants/contract.mutant.2.sol]
PROCESSING MUTANT: 5:         sellerBalance += value; // complicated math with possible overflow  ==>          sellerBalance /= value; // complicated math with possible overflow...VALID [written to ./input/mutants/contract.mutant.3.sol]
PROCESSING MUTANT: 5:         sellerBalance += value; // complicated math with possible overflow  ==>          sellerBalance %= value; // complicated math with possible overflow...VALID [written to ./input/mutants/contract.mutant.4.sol]
PROCESSING MUTANT: 5:         sellerBalance += value; // complicated math with possible overflow  ==>          sellerBalance =+ value; // complicated math with possible overflow...VALID [written to ./input/mutants/contract.mutant.5.sol]
PROCESSING MUTANT: 5:         sellerBalance += value; // complicated math with possible overflow  ==>          sellerBalance += value; // complicated math with possible overflow
        break;...INVALID
PROCESSING MUTANT: 5:         sellerBalance += value; // complicated math with possible overflow  ==>  selfdestruct(msg.sender);...VALID [written to ./input/mutants/contract.mutant.6.sol]
PROCESSING MUTANT: 5:         sellerBalance += value; // complicated math with possible overflow  ==>  revert();...VALID [written to ./input/mutants/contract.mutant.7.sol]
PROCESSING MUTANT: 5:         sellerBalance += value; // complicated math with possible overflow  ==>          sellerBalance  value; // complicated math with possible overflow...INVALID
PROCESSING MUTANT: 5:         sellerBalance += value; // complicated math with possible overflow  ==>          sellerBalance +=  // complicated math with possible overflow...INVALID
PROCESSING MUTANT: 5:         sellerBalance += value; // complicated math with possible overflow  ==>          sellerBalance += value;  complicated math with possible overflow...INVALID
PROCESSING MUTANT: 5:         sellerBalance += value; // complicated math with possible overflow  ==>          sellerBalance += value; //  math with possible overflow...REDUNDANT
PROCESSING MUTANT: 5:         sellerBalance += value; // complicated math with possible overflow  ==>          /*sellerBalance += value; // complicated math with possible overflow*/...VALID [written to ./input/mutants/contract.mutant.8.sol]
LINE 7:         // possible auditor assert APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
PROCESSING MUTANT: 8:         assert(sellerBalance >= value);  ==>          assert(sellerBalance == value);...VALID [written to ./input/mutants/contract.mutant.9.sol]
PROCESSING MUTANT: 8:         assert(sellerBalance >= value);  ==>          assert(sellerBalance != value);...VALID [written to ./input/mutants/contract.mutant.10.sol]
PROCESSING MUTANT: 8:         assert(sellerBalance >= value);  ==>          assert(sellerBalance < value);...VALID [written to ./input/mutants/contract.mutant.11.sol]
PROCESSING MUTANT: 8:         assert(sellerBalance >= value);  ==>          assert(sellerBalance > value);...VALID [written to ./input/mutants/contract.mutant.12.sol]
PROCESSING MUTANT: 8:         assert(sellerBalance >= value);  ==>          assert(sellerBalance <= value);...VALID [written to ./input/mutants/contract.mutant.13.sol]
PROCESSING MUTANT: 8:         assert(sellerBalance >= value);  ==>          assert(sellerBalance === value);...INVALID
PROCESSING MUTANT: 8:         assert(sellerBalance >= value);  ==>          assert(sellerBalance >== value);...INVALID
PROCESSING MUTANT: 8:         assert(sellerBalance >= value);  ==>          assert(sellerBalance <== value);...INVALID
PROCESSING MUTANT: 8:         assert(sellerBalance >= value);  ==>          assert(sellerBalance!== value);...INVALID
PROCESSING MUTANT: 8:         assert(sellerBalance >= value);  ==>          assert(sellerBalance >= value);
        break;...INVALID
PROCESSING MUTANT: 8:         assert(sellerBalance >= value);  ==>  selfdestruct(msg.sender);...VALID [written to ./input/mutants/contract.mutant.14.sol]
PROCESSING MUTANT: 8:         assert(sellerBalance >= value);  ==>  revert();...VALID [written to ./input/mutants/contract.mutant.15.sol]
PROCESSING MUTANT: 8:         assert(sellerBalance >= value);  ==>          assert(sellerBalance  value);...INVALID
PROCESSING MUTANT: 8:         assert(sellerBalance >= value);  ==>          assert(sellerBalance >= ...INVALID
PROCESSING MUTANT: 8:         assert(sellerBalance >= value);  ==>          /*assert(sellerBalance >= value);*/...VALID [written to ./input/mutants/contract.mutant.16.sol]
PROCESSING MUTANT: 9:     }  ==>      }
    break;...INVALID
17 VALID MUTANTS
34 INVALID MUTANTS
3 REDUNDANT MUTANTS
1627308275
Finding test cases ...
Start processing 10 test cases ...
Start processing test case 1
Concretizing symbolic values ...
Run test case on contract.mutant.13.sol
Killed: contract.mutant.13.sol
Run test case on contract.mutant.10.sol
Killed: contract.mutant.10.sol
Run test case on contract.mutant.11.sol
Killed: contract.mutant.11.sol
Run test case on contract.mutant.3.sol
Killed: contract.mutant.3.sol
Run test case on contract.mutant.15.sol
Killed: contract.mutant.15.sol
Run test case on contract.mutant.4.sol
Killed: contract.mutant.4.sol
Run test case on contract.mutant.8.sol
Killed: contract.mutant.8.sol
Run test case on contract.mutant.16.sol
Run test case on contract.mutant.9.sol
Killed: contract.mutant.9.sol
Run test case on contract.mutant.5.sol
Killed: contract.mutant.5.sol
Run test case on contract.mutant.14.sol
Killed: contract.mutant.14.sol
Run test case on contract.mutant.0.sol
Killed: contract.mutant.0.sol
Run test case on contract.mutant.12.sol
Killed: contract.mutant.12.sol
Run test case on contract.mutant.1.sol
Killed: contract.mutant.1.sol
Run test case on contract.mutant.7.sol
Killed: contract.mutant.7.sol
Run test case on contract.mutant.6.sol
Killed: contract.mutant.6.sol
Run test case on contract.mutant.2.sol
Killed: contract.mutant.2.sol
Start processing test case 2
Concretizing symbolic values ...
Run test case on contract.mutant.16.sol
Start processing test case 3
Concretizing symbolic values ...
Run test case on contract.mutant.16.sol
Start processing test case 4
Concretizing symbolic values ...
Run test case on contract.mutant.16.sol
Start processing test case 5
Concretizing symbolic values ...
Run test case on contract.mutant.16.sol
Start processing test case 6
Concretizing symbolic values ...
Run test case on contract.mutant.16.sol
Start processing test case 7
Concretizing symbolic values ...
Run test case on contract.mutant.16.sol
Killed: contract.mutant.16.sol
Start processing test case 8
Concretizing symbolic values ...
Start processing test case 9
Concretizing symbolic values ...
Start processing test case 10
Concretizing symbolic values ...
Write result in result.txt

Number of mutants: 17
Number of killed mutants: 17
2021-07-26 18:34:58,926: [159760] m.c.plugin:WARNING: Caught will_solve in state None, but failed to capture its initialization
2021-07-26 18:34:58,931: [159761] m.c.plugin:WARNING: Caught will_solve in state None, but failed to capture its initialization
2021-07-26 18:34:58,933: [159762] m.c.plugin:WARNING: Caught will_solve in state None, but failed to capture its initialization
2021-07-26 18:34:58,936: [159759] m.c.plugin:WARNING: Caught will_solve in state None, but failed to capture its initialization
2021-07-26 18:34:58,952: [159771] m.c.plugin:WARNING: Caught will_solve in state None, but failed to capture its initialization
2021-07-26 18:34:58,952: [159763] m.c.plugin:WARNING: Caught will_solve in state None, but failed to capture its initialization
2021-07-26 18:34:58,953: [159769] m.c.plugin:WARNING: Caught will_solve in state None, but failed to capture its initialization
2021-07-26 18:34:58,954: [159767] m.c.plugin:WARNING: Caught will_solve in state None, but failed to capture its initialization
2021-07-26 18:34:58,957: [159766] m.c.plugin:WARNING: Caught will_solve in state None, but failed to capture its initialization
2021-07-26 18:34:58,959: [159765] m.c.plugin:WARNING: Caught will_solve in state None, but failed to capture its initialization
manticore run time: 11.629454135894775
project run time: 11.527458906173706
1627308307