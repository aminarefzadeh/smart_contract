1627491232
*** UNIVERSALMUTATOR ***
MUTATING WITH RULES: universal.rules, solidity.rules, c_like.rules
46 MUTANTS GENERATED BY RULES
PROCESSING MUTANT: 3: contract SimpleStorage {  ==>  contract SimpleStorage {
break;...INVALID
PROCESSING MUTANT: 3: contract SimpleStorage {  ==>  selfdestruct(msg.sender);...INVALID
PROCESSING MUTANT: 3: contract SimpleStorage {  ==>  revert();...INVALID
PROCESSING MUTANT: 3: contract SimpleStorage {  ==>  contract  {...INVALID
PROCESSING MUTANT: 3: contract SimpleStorage {  ==>  contract SimpleStorage ...INVALID
PROCESSING MUTANT: 3: contract SimpleStorage {  ==>  /*contract SimpleStorage {*/...INVALID
PROCESSING MUTANT: 4:     uint storedData;  ==>      uint storedData;
    break;...INVALID
PROCESSING MUTANT: 4:     uint storedData;  ==>      int storedData;...INVALID
PROCESSING MUTANT: 4:     uint storedData;  ==>  selfdestruct(msg.sender);...INVALID
PROCESSING MUTANT: 4:     uint storedData;  ==>  revert();...INVALID
PROCESSING MUTANT: 4:     uint storedData;  ==>      uint ...INVALID
PROCESSING MUTANT: 4:     uint storedData;  ==>      /*uint storedData;*/...INVALID
PROCESSING MUTANT: 6:     function set(uint x) public {  ==>      function set(uint x) public {
    break;...INVALID
PROCESSING MUTANT: 6:     function set(uint x) public {  ==>      function set(int x) public {...INVALID
PROCESSING MUTANT: 6:     function set(uint x) public {  ==>  selfdestruct(msg.sender);...INVALID
PROCESSING MUTANT: 6:     function set(uint x) public {  ==>  revert();...INVALID
PROCESSING MUTANT: 6:     function set(uint x) public {  ==>      function  x) public {...INVALID
PROCESSING MUTANT: 6:     function set(uint x) public {  ==>      function set(uint  public {...INVALID
PROCESSING MUTANT: 6:     function set(uint x) public {  ==>      function set(uint x)  {...REDUNDANT
PROCESSING MUTANT: 6:     function set(uint x) public {  ==>      function set(uint x) public ...INVALID
PROCESSING MUTANT: 6:     function set(uint x) public {  ==>      /*function set(uint x) public {*/...INVALID
PROCESSING MUTANT: 7:         storedData = x;  ==>          storedData = x;
        break;...INVALID
PROCESSING MUTANT: 7:         storedData = x;  ==>  selfdestruct(msg.sender);...VALID [written to ./input/mutants/contract.mutant.0.sol]
PROCESSING MUTANT: 7:         storedData = x;  ==>  revert();...VALID [written to ./input/mutants/contract.mutant.1.sol]
PROCESSING MUTANT: 7:         storedData = x;  ==>          storedData  x;...INVALID
PROCESSING MUTANT: 7:         storedData = x;  ==>          storedData = ...INVALID
PROCESSING MUTANT: 7:         storedData = x;  ==>          /*storedData = x;*/...VALID [written to ./input/mutants/contract.mutant.2.sol]
PROCESSING MUTANT: 8:     }  ==>      }
    break;...INVALID
PROCESSING MUTANT: 10:     function get() public view returns (uint) {  ==>      function get() public view returns (uint) {
    break;...INVALID
PROCESSING MUTANT: 10:     function get() public view returns (uint) {  ==>      function get() public view returns (int) {...INVALID
PROCESSING MUTANT: 10:     function get() public view returns (uint) {  ==>      function get() public pure returns (uint) {...INVALID
PROCESSING MUTANT: 10:     function get() public view returns (uint) {  ==>  selfdestruct(msg.sender);...INVALID
PROCESSING MUTANT: 10:     function get() public view returns (uint) {  ==>  revert();...INVALID
PROCESSING MUTANT: 10:     function get() public view returns (uint) {  ==>      function  public view returns (uint) {...INVALID
PROCESSING MUTANT: 10:     function get() public view returns (uint) {  ==>      function get()  view returns (uint) {...REDUNDANT
PROCESSING MUTANT: 10:     function get() public view returns (uint) {  ==>      function get() public  returns (uint) {...REDUNDANT
PROCESSING MUTANT: 10:     function get() public view returns (uint) {  ==>      function get() public view  (uint) {...INVALID
PROCESSING MUTANT: 10:     function get() public view returns (uint) {  ==>      function get() public view returns  {...INVALID
PROCESSING MUTANT: 10:     function get() public view returns (uint) {  ==>      function get() public view returns (uint) ...INVALID
PROCESSING MUTANT: 10:     function get() public view returns (uint) {  ==>      /*function get() public view returns (uint) {*/...INVALID
PROCESSING MUTANT: 11:         return storedData;  ==>          return storedData;
        break;...INVALID
PROCESSING MUTANT: 11:         return storedData;  ==>  selfdestruct(msg.sender);...VALID [written to ./input/mutants/contract.mutant.3.sol]
PROCESSING MUTANT: 11:         return storedData;  ==>  revert();...VALID [written to ./input/mutants/contract.mutant.4.sol]
PROCESSING MUTANT: 11:         return storedData;  ==>          return ...INVALID
PROCESSING MUTANT: 11:         return storedData;  ==>          /*return storedData;*/...VALID [written to ./input/mutants/contract.mutant.5.sol]
PROCESSING MUTANT: 12:     }  ==>      }
    break;...INVALID
6 VALID MUTANTS
37 INVALID MUTANTS
3 REDUNDANT MUTANTS
1627491232
Finding test cases ...
Concretizing testcase 1
Concretizing testcase 2
Concretizing testcase 3
Concretizing testcase 4
Concretizing testcase 5
Concretizing testcase 6
Concretizing testcase 7
Concretizing testcase 8
Concretizing testcase 9
Concretizing testcase 10
Concretizing testcase 11
Concretizing testcase 12
Concretizing testcase 13
Concretizing testcase 14
Start running test case 1 on main contract
Start running test case 2 on main contract
Start running test case 3 on main contract
Start running test case 4 on main contract
Start running test case 5 on main contract
Start running test case 6 on main contract
Start running test case 7 on main contract
Start running test case 8 on main contract
Start running test case 9 on main contract
Start running test case 10 on main contract
Start running test case 11 on main contract
Start running test case 12 on main contract
Start running test case 13 on main contract
Start running test case 14 on main contract
Running 14 testcases on mutants ...
Start running test case 1 on contract.mutant.0.sol
Mutant contract.mutant.0.sol killed by testcase 1
Start running test case 1 on contract.mutant.1.sol
Mutant contract.mutant.1.sol killed by testcase 1
Start running test case 1 on contract.mutant.2.sol
Mutant contract.mutant.2.sol killed by testcase 1
Start running test case 1 on contract.mutant.3.sol
Mutant contract.mutant.3.sol killed by testcase 1
Start running test case 1 on contract.mutant.4.sol
Mutant contract.mutant.4.sol killed by testcase 1
Start running test case 1 on contract.mutant.5.sol
Mutant contract.mutant.5.sol killed by testcase 1
Write result in result.txt

Number of mutants: 6
Number of killed mutants: 6
2021-07-28 21:24:05,531: [12858] m.c.plugin:WARNING: Caught will_solve in state None, but failed to capture its initialization
2021-07-28 21:24:05,532: [12851] m.c.plugin:WARNING: Caught will_solve in state None, but failed to capture its initialization
2021-07-28 21:24:05,533: [12852] m.c.plugin:WARNING: Caught will_solve in state None, but failed to capture its initialization
2021-07-28 21:24:05,535: [12854] m.c.plugin:WARNING: Caught will_solve in state None, but failed to capture its initialization
2021-07-28 21:24:05,537: [12856] m.c.plugin:WARNING: Caught will_solve in state None, but failed to capture its initialization
2021-07-28 21:24:05,542: [12860] m.c.plugin:WARNING: Caught will_solve in state None, but failed to capture its initialization
2021-07-28 21:24:05,542: [12864] m.c.plugin:WARNING: Caught will_solve in state None, but failed to capture its initialization
2021-07-28 21:24:05,542: [12862] m.c.plugin:WARNING: Caught will_solve in state None, but failed to capture its initialization
2021-07-28 21:24:05,559: [12866] m.c.plugin:WARNING: Caught will_solve in state None, but failed to capture its initialization
2021-07-28 21:24:05,601: [12863] m.c.plugin:WARNING: Caught will_solve in state None, but failed to capture its initialization
manticore run time: 4.821720838546753
project run time: 8.180764198303223
1627491247